package com.common.projectcommonframe.utils;import android.app.Activity;import android.content.Context;import android.graphics.Bitmap;import android.graphics.Rect;import android.util.DisplayMetrics;import android.view.View;import android.view.WindowManager;import java.io.File;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;/** * 获得屏幕相关的辅助类 */public class ScreenUtil {    private ScreenUtil() {		/* cannot be instantiated */        throw new UnsupportedOperationException("cannot be instantiated");    }    /**     * 获得屏幕宽度     *     * @param context     * @return     */    public static int getScreenWidth(Context context) {        WindowManager wm = (WindowManager) context                .getSystemService(Context.WINDOW_SERVICE);        DisplayMetrics outMetrics = new DisplayMetrics();        wm.getDefaultDisplay().getMetrics(outMetrics);        return outMetrics.widthPixels;    }    /**     * 获得屏幕高度     *     * @param context     * @return     */    public static int getScreenHeight(Context context) {        WindowManager wm = (WindowManager) context                .getSystemService(Context.WINDOW_SERVICE);        DisplayMetrics outMetrics = new DisplayMetrics();        wm.getDefaultDisplay().getMetrics(outMetrics);        return outMetrics.heightPixels;    }    /**     * 获得状态栏的高度     *     * @param context     * @return     */    public static int getStatusHeight(Context context) {        int statusHeight = -1;        try {            Class<?> clazz = Class.forName("com.android.internal.R$dimen");            Object object = clazz.newInstance();            int height = Integer.parseInt(clazz.getField("status_bar_height")                    .get(object).toString());            statusHeight = context.getResources().getDimensionPixelSize(height);        } catch (Exception e) {            e.printStackTrace();        }        return statusHeight;    }    /**     * 获取当前屏幕截图，包含状态栏，暂时不用     *     * @param activity     * @return     */    public static Bitmap snapShotWithStatusBar(Activity activity) {        View view = activity.getWindow().getDecorView();        view.setDrawingCacheEnabled(true);        view.buildDrawingCache();        Bitmap bmp = view.getDrawingCache();        int width = getScreenWidth(activity);        int height = getScreenHeight(activity);        Bitmap bp = null;        bp = Bitmap.createBitmap(bmp, 0, 0, width, height);        view.destroyDrawingCache();        return bp;    }    /**     * 获取当前屏幕截图，不包含状态栏，暂时不用     *     * @param activity     * @return     */    public static Bitmap snapShotWithoutStatusBar(Activity activity) {        View view = activity.getWindow().getDecorView();        view.setDrawingCacheEnabled(true);        view.buildDrawingCache();        Bitmap bmp = view.getDrawingCache();        Rect frame = new Rect();        activity.getWindow().getDecorView().getWindowVisibleDisplayFrame(frame);        int statusBarHeight = frame.top;        int width = getScreenWidth(activity);        int height = getScreenHeight(activity);        Bitmap bp = null;        bp = Bitmap.createBitmap(bmp, 0, statusBarHeight, width, height                - statusBarHeight);        view.destroyDrawingCache();        return bp;    }    /**     * 将px值转换为dip或dp值，保证尺寸大小不变     *     * @param context     * @param pxValue     *            （DisplayMetrics类中属性density）     * @return     */    public static int px2dp(Context context, float pxValue) {        final float scale = context.getResources().getDisplayMetrics().density;        return (int) (pxValue / scale + 0.5f);    }    /**     * 将dip或dp值转换为px值，保证尺寸大小不变     *     * @param dipValue     * @param dipValue     *            （DisplayMetrics类中属性density）     * @return     */    public static int dp2px(Context context, float dipValue) {        final float scale = context.getResources().getDisplayMetrics().density;        return (int) (dipValue * scale + 0.5f);    }    /**     * 将px值转换为sp值，保证文字大小不变     *     * @param pxValue     * @param pxValue     *            （DisplayMetrics类中属性scaledDensity）     * @return     */    public static int px2sp(Context context, float pxValue) {        final float fontScale = context.getResources().getDisplayMetrics().scaledDensity;        return (int) (pxValue / fontScale + 0.5f);    }    /**     * 将sp值转换为px值，保证文字大小不变     *     * @param spValue     * @param spValue     *            （DisplayMetrics类中属性scaledDensity）     * @return     */    public static int sp2px(Context context, float spValue) {        final float fontScale = context.getResources().getDisplayMetrics().scaledDensity;        return (int) (spValue * fontScale + 0.5f);    }    /**     * 截屏Activity 去掉标题栏     * @param activity     * @return     */    public static Bitmap takeScreenShot(Activity activity) {        // View是你需要截图的View        View view = activity.getWindow().getDecorView();        view.setDrawingCacheEnabled(true);        view.buildDrawingCache();        Bitmap b1 = view.getDrawingCache();        // 获取状态栏高度        Rect frame = new Rect();        activity.getWindow().getDecorView().getWindowVisibleDisplayFrame(frame);        int statusBarHeight = frame.top;        // 获取屏幕长和高        int width = activity.getWindowManager().getDefaultDisplay().getWidth();        int height = activity.getWindowManager().getDefaultDisplay()                .getHeight();        // 去掉标题栏        Bitmap b = Bitmap.createBitmap(b1, 0, statusBarHeight, width, height                - statusBarHeight);        view.destroyDrawingCache();        return b;    }    /**     * 截屏根据View     * @param view     * @return     */    public static Bitmap takeScreenShot(View view) {        if (view == null) {            return  null;        }        // View是你需要截图的View        view.setDrawingCacheEnabled(true);        view.buildDrawingCache();        Bitmap bitmap = Bitmap.createBitmap(view.getDrawingCache()); //创建一个DrawingCache的拷贝，因为DrawingCache得到的位图在禁用后会被回收        view.destroyDrawingCache();        return bitmap;    }    private static boolean savePic(Bitmap b, File filePath) {        FileOutputStream fos = null;        try {            fos = new FileOutputStream(filePath);            if (null != fos) {                b.compress(Bitmap.CompressFormat.PNG, 100, fos);                fos.flush();                fos.close();                return true ;            }        } catch (FileNotFoundException e) {             e.printStackTrace();            return false ;        } catch (IOException e) {             e.printStackTrace();            return false ;        }        return false ;    }    /**     * 根据Activity来截屏，     * @param a     * @param filePath 图片存储地址     */    public static boolean shoot(Activity a, File filePath) {        if (filePath == null) {            throw  new  UnsupportedOperationException("截图图片保存路径为空~") ;        }        if (!filePath.getParentFile().exists()) {            filePath.getParentFile().mkdirs();        }        return savePic(takeScreenShot(a), filePath);    }    /**     * 根据View来截屏把图片保存到传进来的路径     * @param view     * @param filePath     */    public static boolean shoot(View view, File filePath) {        if (filePath == null) {            throw  new  UnsupportedOperationException("截图图片保存路径为空~") ;        }        if (!filePath.getParentFile().exists()) {            filePath.getParentFile().mkdirs();        }        return savePic(takeScreenShot(view), filePath);    }}